const pool = require("../db/connection");

exports.searchMaterials = async (req, res) => {
  try {
    const { name, name_like, query } = req.query;
    
    if (name) {
      // Á≤æÁ°ÆÊü•ÊâæÔºåËøîÂõûÂîØ‰∏ÄÂØπË±°
      const [rows] = await pool.query(
        "SELECT id, name, model, unit, unit_price, warehouse_id, property FROM materials WHERE name = ? LIMIT 1",
        [name]
      );
      if (rows.length === 0) {
        return res.status(404).json({ message: "Êú™ÊâæÂà∞ËØ•ÊùêÊñô" });
      }
      res.json(rows[0]);
    } else if (name_like) {
      // Ê®°Á≥äÊü•ÊâæÔºåËøîÂõûÊï∞ÁªÑ
      const [rows] = await pool.query(
        "SELECT id, name, model, unit, unit_price, warehouse_id, property FROM materials WHERE name LIKE ? ORDER BY name ASC LIMIT 15",
        [`%${name_like}%`]
      );
      res.json(rows);
    } else if (query) {
      // ÈÄöÁî®ÊêúÁ¥¢ÔºåÊîØÊåÅÂêçÁß∞ÂíåÂûãÂè∑ÁöÑÊ®°Á≥äÂåπÈÖç
      const [rows] = await pool.query(
        "SELECT id, name, model, unit, unit_price, warehouse_id, property FROM materials WHERE name LIKE ? OR model LIKE ? ORDER BY name ASC LIMIT 15",
        [`%${query}%`, `%${query}%`]
      );
      res.json(rows);
    } else {
      // ËøîÂõûÂÖ®ÈÉ®
      const [rows] = await pool.query(
        "SELECT id, name, model, unit, unit_price, warehouse_id, property FROM materials ORDER BY name ASC LIMIT 100"
      );
      res.json(rows);
    }
  } catch (err) {
    res.status(500).json({ message: "Êü•ËØ¢ÊùêÊñôÂ§±Ë¥•", error: err.message });
  }
};

// üÜï Êñ∞Â¢ûÔºöÊ†πÊçÆÊùêÊñôÂêçÁß∞Ëé∑ÂèñÊâÄÊúâÂûãÂè∑
exports.getModelsByName = async (req, res) => {
  try {
    const { name } = req.query;
    console.log("üîç getModelsByName Ë¢´Ë∞ÉÁî®ÔºåÂèÇÊï∞:", { name });
    
    if (!name) {
      console.log("‚ùå Áº∫Â∞ëÊùêÊñôÂêçÁß∞");
      return res.status(400).json({ message: "Áº∫Â∞ëÊùêÊñôÂêçÁß∞" });
    }
    
    // Ëé∑ÂèñÊåáÂÆöÊùêÊñôÂêçÁß∞ÁöÑÊâÄÊúâÂûãÂè∑
    const [rows] = await pool.query(
      "SELECT DISTINCT model, unit, unit_price, warehouse_id, property FROM materials WHERE name = ? ORDER BY model ASC",
      [name]
    );
    
    console.log("üìä Êï∞ÊçÆÂ∫ìÊü•ËØ¢ÁªìÊûú:", rows);
    console.log("üìä Êü•ËØ¢ÁöÑSQLÂèÇÊï∞:", [name]);
    
    res.json(rows);
  } catch (err) {
    console.error("‚ùå getModelsByName ÈîôËØØ:", err);
    res.status(500).json({ message: "Ëé∑ÂèñÂûãÂè∑Â§±Ë¥•", error: err.message });
  }
};

// üÜï Êñ∞Â¢ûÔºöÊ†πÊçÆÊùêÊñôÂêçÁß∞ÂíåÂûãÂè∑Ëé∑ÂèñÂÆåÊï¥‰ø°ÊÅØ
exports.getMaterialByNameAndModel = async (req, res) => {
  try {
    const { name, model } = req.query;
    if (!name || !model) {
      return res.status(400).json({ message: "Áº∫Â∞ëÊùêÊñôÂêçÁß∞ÊàñÂûãÂè∑" });
    }
    
    // Ê†πÊçÆÂêçÁß∞ÂíåÂûãÂè∑Ëé∑ÂèñÂÆåÊï¥‰ø°ÊÅØ
    const [rows] = await pool.query(
      "SELECT * FROM materials WHERE name = ? AND model = ? LIMIT 1",
      [name, model]
    );
    
    if (rows.length === 0) {
      return res.status(404).json({ message: "Êú™ÊâæÂà∞ËØ•ÊùêÊñô" });
    }
    
    res.json(rows[0]);
  } catch (err) {
    res.status(500).json({ message: "Êü•ËØ¢ÊùêÊñôÂ§±Ë¥•", error: err.message });
  }
};

exports.addInventory = async (req, res) => {
  try {
    const {
      name, warehouse_id, quantity, model, unit_price, unit, property
    } = req.body;
    
    // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®ÔºàÂêåÊó∂ÊØîËæÉÂêçÁß∞„ÄÅÂûãÂè∑Âíå‰ªìÂ∫ìIDÔºâ
    const [rows] = await pool.query(
      "SELECT id FROM materials WHERE name = ? AND model = ? AND warehouse_id = ?",
      [name, model, warehouse_id]
    );
    
    if (rows.length > 0) {
      // Â∑≤Â≠òÂú®ÔºàÂêçÁß∞„ÄÅÂûãÂè∑„ÄÅ‰ªìÂ∫ìÈÉΩÁõ∏ÂêåÔºâÔºåÊõ¥Êñ∞Êï∞Èáè
      await pool.query(
        "UPDATE materials SET quantity = quantity + ? WHERE name = ? AND model = ? AND warehouse_id = ?",
        [quantity, name, model, warehouse_id]
      );
      res.json({ message: "Â∫ìÂ≠òÊï∞ÈáèÂ∑≤Â¢ûÂä†" });
    } else {
      // Êñ∞ÊùêÊñôÔºàÂêçÁß∞ÊàñÂûãÂè∑Êàñ‰ªìÂ∫ì‰∏çÂêåÔºâÔºåÊèíÂÖ•Êñ∞ËÆ∞ÂΩï
      await pool.query(
        "INSERT INTO materials (name, warehouse_id, quantity, model, unit_price, unit, property, used_quantity) VALUES (?, ?, ?, ?, ?, ?, ?, 0)",
        [name, warehouse_id, quantity, model, unit_price, unit, property]
      );
      res.status(201).json({ message: "Êñ∞ÊùêÊñôÂ∑≤Ê∑ªÂä†" });
    }
  } catch (err) {
    res.status(500).json({ message: "Ê∑ªÂä†Â∫ìÂ≠òÂ§±Ë¥•", error: err.message });
  }
};

exports.getAllMaterials = async (req, res) => {
  try {
    const [rows] = await pool.query("SELECT * FROM materials ORDER BY id DESC");
    res.json(rows);
  } catch (err) {
    res.status(500).json({ message: "Ëé∑ÂèñÊùêÊñôÂ§±Ë¥•", error: err.message });
  }
};

exports.getMaterialDetail = async (req, res) => {
  try {
    const { name } = req.query;
    if (!name) return res.status(400).json({ message: "Áº∫Â∞ëÊùêÊñôÂêçÁß∞" });
    const [rows] = await pool.query(
      "SELECT * FROM materials WHERE name = ? LIMIT 1",
      [name]
    );
    if (rows.length === 0) {
      return res.status(404).json({ message: "Êú™ÊâæÂà∞ËØ•ÊùêÊñô" });
    }
    res.json(rows[0]);
  } catch (err) {
    res.status(500).json({ message: "Êü•ËØ¢ÊùêÊñôËØ¶ÊÉÖÂ§±Ë¥•", error: err.message });
  }
};

exports.findMaterialId = async (req, res) => {
  try {
    const { name, model } = req.query;
    if (!name || !model) return res.status(400).json({ message: "Áº∫Â∞ëÊùêÊñôÂêçÁß∞ÊàñÂûãÂè∑" });
    const [rows] = await pool.query(
      "SELECT * FROM materials WHERE name = ? AND model = ? LIMIT 1",
      [name, model]
    );
    if (rows.length === 0) {
      return res.status(404).json({ message: "Êú™ÊâæÂà∞ËØ•ÊùêÊñô" });
    }
    res.json(rows[0]);
  } catch (err) {
    res.status(500).json({ message: "Êü•ÊâæÊùêÊñôIDÂ§±Ë¥•", error: err.message });
  }
};

exports.extractMaterial = async (req, res) => {
  try {
    const { id } = req.params;
    const { quantity } = req.body;
    if (!quantity || isNaN(quantity)) {
      return res.status(400).json({ message: 'ÂèÇÊï∞quantityÊó†Êïà' });
    }
    // ÂÖàÊü•ÂΩìÂâçused_quantity
    const [rows] = await pool.query('SELECT used_quantity FROM materials WHERE id = ?', [id]);
    if (!rows.length) return res.status(404).json({ message: 'Êú™ÊâæÂà∞ÊùêÊñô' });
    const current = rows[0].used_quantity;
    const newUsed = Math.max(0, current - Number(quantity));
    await pool.query('UPDATE materials SET used_quantity = ? WHERE id = ?', [newUsed, id]);
    res.json({ success: true });
  } catch (err) {
    res.status(500).json({ message: 'ÊèêÂèñÂ§±Ë¥•', error: err.message });
  }
};

exports.getModelsByName = async (req, res) => {
  const { name } = req.query;
  if (!name) return res.status(400).json({ message: "Áº∫Â∞ëÊùêÊñôÂêçÁß∞" });
  const [rows] = await pool.query(
    "SELECT DISTINCT model FROM materials WHERE name = ? AND model IS NOT NULL AND model != ''",
    [name]
  );
  res.json(rows.map(r => r.model));
};

exports.getMaterialById = async (req, res) => {
  try {
    const { id } = req.params;
    if (!id) return res.status(400).json({ message: "Áº∫Â∞ëÊùêÊñôID" });
    const [rows] = await pool.query(
      "SELECT * FROM materials WHERE id = ? LIMIT 1",
      [id]
    );
    if (rows.length === 0) {
      return res.status(404).json({ message: "Êú™ÊâæÂà∞ËØ•ÊùêÊñô" });
    }
    res.json(rows[0]);
  } catch (err) {
    res.status(500).json({ message: "Êü•ËØ¢ÊùêÊñôËØ¶ÊÉÖÂ§±Ë¥•", error: err.message });
  }
};

exports.getProcessingMaterials = async (req, res) => {
  try {
    const [rows] = await pool.query(
      "SELECT id, name, model, quantity, min_quantity, unit_price, unit FROM materials WHERE warehouse_id = 3 AND quantity < min_quantity ORDER BY name, model"
    );
    res.json(rows);
  } catch (err) {
    res.status(500).json({ message: "Ëé∑ÂèñÂä†Â∑•‰ª∂Â§±Ë¥•", error: err.message });
  }
};

exports.getAllProcessingMaterials = async (req, res) => {
  try {
    const [rows] = await pool.query(
      "SELECT id, name, model, quantity, unit_price, unit FROM materials WHERE warehouse_id = 3 ORDER BY name, model"
    );
    res.json(rows);
  } catch (err) {
    res.status(500).json({ message: "Ëé∑ÂèñÂä†Â∑•‰ª∂Â§±Ë¥•", error: err.message });
  }
};

// ÈÄöÁî®ÊùêÊñôÊêúÁ¥¢Êé•Âè£ - Áî®‰∫éËá™Âà∂ÂìÅÂíåÊùêÊñôÁöÑËá™Âä®Ë°•ÂÖ®
exports.searchMaterials = async (req, res) => {
  try {
    const { query } = req.query;
    if (!query || query.trim() === '') {
      return res.json([]);
    }
    
    const searchQuery = `%${query.trim()}%`;
    const [rows] = await pool.query(
      "SELECT id, name, model, quantity, unit_price, unit, warehouse_id FROM materials WHERE name LIKE ? OR model LIKE ? ORDER BY name, model LIMIT 20",
      [searchQuery, searchQuery]
    );
    
    res.json(rows);
  } catch (err) {
    res.status(500).json({ message: "ÊêúÁ¥¢ÊùêÊñôÂ§±Ë¥•", error: err.message });
  }
}; 